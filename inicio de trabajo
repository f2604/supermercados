<? versión xml = " 1.0 " codificación = " UTF-8 " ?>
<!-- Puede editar libremente este archivo. Vea los bloques comentados a continuación para -->
<!-- algunos ejemplos de cómo personalizar la compilación. -->
<!-- (Si lo elimina y vuelve a abrir el proyecto, se volverá a crear.) -->
<!-- De manera predeterminada, solo los comandos Limpiar y Generar usan este script de compilación. -->
<!-- Los comandos como Ejecutar, Depurar y Probar solo usan este script de compilación si -->
<!-- la función Compilar al guardar está desactivada para el proyecto. -->
<!-- Puede desactivar la opción Compilar al guardar (o Implementar al guardar) -->
<!-- en el cuadro de diálogo Propiedades del proyecto del proyecto. -->
< nombre del proyecto  = " TPV_Supermercado " default = " default " basedir = " . " >  
    < descripción >Construye, prueba y ejecuta el proyecto TPV Supermercado.</ descripción >
    < archivo de importación  = " nbproject/build-impl.xml " />
    <!--
    Existen varios objetivos que por defecto están vacíos y que pueden ser
    utilizado para la ejecución de sus tareas. Estos objetivos generalmente se ejecutan
    antes y después de algunos objetivos principales. Están:
      -pre-init: llamado antes de la inicialización de las propiedades del proyecto
      -post-init: llamado después de la inicialización de las propiedades del proyecto
      -pre-compilación: llamado antes de la compilación javac
      -post-compilación: llamado después de la compilación javac
      -pre-compile-single: llamado antes de la compilación javac de un solo archivo
      -post-compile-single: llamado después de la compilación javac de un solo archivo
      -pre-compile-test: llamado antes de la compilación javac de las pruebas JUnit
      -post-compile-test: llamado después de la compilación javac de las pruebas JUnit
      -pre-compile-test-single: llamado antes de la compilación javac de la prueba JUnit única
      -post-compile-test-single: llamado después de la compilación javac de la prueba JUunit única
      -pre-jar: llamado antes del edificio JAR
      -post-jar: llamado después del edificio JAR
      -post-clean: llamado después de limpiar los productos de construcción
    (Los destinos que comienzan con '-' no están destinados a llamarse por sí solos).
    El ejemplo de insertar un ofuscador después de la compilación podría verse así:
        <nombre de destino="-post-compilación">
            <ofuscar>
                <fileset dir="${build.classes.dir}"/>
            </ofuscar>
        </objetivo>
    Para obtener una lista de las propiedades disponibles, consulte las propiedades importadas.
    archivo nbproject/build-impl.xml.
    Otra forma de personalizar la compilación es anular los objetivos principales existentes.
    Los objetivos de interés son:
      -init-macrodef-javac: define la macro para la compilación javac
      -init-macrodef-junit: define la macro para la ejecución de junit
      -init-macrodef-debug: define la macro para la depuración de clases
      -init-macrodef-java: define la macro para la ejecución de la clase
      -do-jar: edificio JAR
      ejecutar: ejecución del proyecto
      -javadoc-build: generación de Javadoc
      informe de prueba: generación de informes JUnit
    Un ejemplo de anulación del objetivo para la ejecución del proyecto podría verse así:
        <target name="ejecutar" depende="TPV_Supermercado-impl.jar">
            <directorio ejecutivo="bin" ejecutable="launcher.exe">
                <arg archivo="${dist.jar}"/>
            </ejecutivo>
        </objetivo>
    Tenga en cuenta que el objetivo anulado depende del objetivo jar y no solo de
    el destino de compilación como lo hace el destino de ejecución regular. Una vez más, para obtener una lista de los disponibles
    propiedades que puede usar, verifique el objetivo que está anulando en el
    archivo nbproject/build-impl.xml.
    -->
</ proyecto >
